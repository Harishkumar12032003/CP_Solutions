class Solution {
public:
    string longestPalindrome(string s) {
        int n=s.length();
        vector<vector<bool>>dp(n,vector<bool>(n,false));
        int start=0;
        int len=1;
        
        //length 1
        for(int i=0;i<n;i++)
        {
            dp[i][i]=true;
        } 
        
        
        //length 2
        for(int i=0;i<n-1;i++)
        {
            if(s[i]==s[i+1])
            {
                dp[i][i+1]=true;
                start=i;
                len=2;
            }
        }
        
        
        //different length
        for(int i=3;i<=n;i++)
        {
            for(int j=0;j<n-i+1;j++)
            {
                int k=j+i-1;
                
                //checking if the jth and kth character are same then string from j+1 to k-1 is a palindromic substring or not
                if(s[j]==s[k] && dp[j+1][k-1])
                {
                    dp[j][k]=true;
                    if(i>len)
                    {
                        start=j;
                    len=i;
                    }
                }
            }
        }
        
        return s.substr(start,len);
        
        
    }
};
